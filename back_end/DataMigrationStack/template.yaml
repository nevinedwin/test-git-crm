AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Data Migration for Builder Template"

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 900
    MemorySize: 1024
    Layers:
      - !Ref AwsSdkLayer
    Environment:
      Variables:
        entitiesTableName: !Sub ${StackNamePrefix}entities-${StageName}-db
        entitiesTableByEntityAndId: !Sub ${StackNamePrefix}byEntityAndIdIndex-${StageName}-db
        entitiesTableByDataAndEntity: !Sub ${StackNamePrefix}byDataAndEntityIndex-${StageName}-db
        STACK_PREFIX: !Ref StackNamePrefix
        ES_ENDPOINT: !Ref ElasticsearchDomainEndpoint
        ES_REGION: !Ref AWS::Region
        FIREHOSE_ARN: !Ref HyphenCRMFirehoseARN
        FIREHOSE_PINPOINT_ROLE: !Ref FirehosePinpointRoleARN
        FILE_MANAGER_BUCKET_NAME: !Sub ${StackNamePrefix}frontend-${StageName}-s3
    Tags:
      Environment: !Ref StageName
      Application: !Ref ApplicationTag
      Owner: !Ref OwnerTag
      Purpose: !Ref PurposeTag
      Service: lambda
Parameters:
  StageName:
    Type: String
  StackNamePrefix:
    Type: String
  AwsSdkLayer:
    Type: String
  HyphenLambdaManagedPolicy:
    Type: String
  ElasticsearchDomainEndpoint:
    Type: String
  ElasticsearchDomain:
    Type: String
  FileManagerBucketARN:
    Type: String
  CognitoUserPoolExtArn:
    Type: String
  HyphenCRMFirehoseARN:
    Type: String
  FirehosePinpointRoleARN:
    Type: String
  ExternalUserPoolId:
    Type: String
  EnDCryptKeyARN:
    Type: String
  DynamoDBArn:
    Type: String
  ApplicationTag:
    Type: String
  OwnerTag:
    Type: String
  PurposeTag:
    Type: String
  NestedStackPrefix:
    Type: String
    Default: "dataMigration-" 
Resources:
  ExceptionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ExceptionLambdaRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub ${FileManagerBucketARN}/builder_exports/*
                  - !Sub ${FileManagerBucketARN}/builder_imports/*
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:PutItem
                Resource:
                  - !Ref DynamoDBArn
                  - !Sub ${DynamoDBArn}/index/*
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: iam

  ExceptionLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: exception.main
      FunctionName: !Sub ${StackNamePrefix}${NestedStackPrefix}ExceptionLambda-${StageName}
      CodeUri: exception
      Role: !GetAtt ExceptionLambdaRole.Arn

  ExceptionLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ExceptionLambda}
      RetentionInDays: 90
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: cloudwatch

  SuccessLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: SuccessLambdaRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub ${FileManagerBucketARN}/builder_exports/*
                  - !Sub ${FileManagerBucketARN}/builder_imports/*
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:PutItem
                Resource:
                  - !Ref DynamoDBArn
                  - !Sub ${DynamoDBArn}/index/*
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: iam

  SuccessLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: success.main
      FunctionName: !Sub ${StackNamePrefix}${NestedStackPrefix}SuccessLambda-${StageName}
      CodeUri: success
      Role: !GetAtt SuccessLambdaRole.Arn

  SuccessLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SuccessLambda}
      RetentionInDays: 90
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: cloudwatch

  ExportDBEntitiesRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref HyphenLambdaManagedPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ExportDBEntitiesRoleRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub ${FileManagerBucketARN}/builder_exports/*
              - Effect: Allow
                Action:
                  - mobiletargeting:GetSegments
                  - mobiletargeting:GetCampaigns
                  - mobiletargeting:ListJourneys
                  - mobiletargeting:GetApp
                Resource: !Sub "arn:aws:mobiletargeting:${AWS::Region}:${AWS::AccountId}:apps/*"
              - Effect: Allow
                Action:
                  - mobiletargeting:ListTemplates
                Resource: !Sub "arn:aws:mobiletargeting:${AWS::Region}:${AWS::AccountId}:templates"
              - Effect: Allow
                Action:
                  - mobiletargeting:GetEmailTemplate
                Resource:
                  - !Sub "arn:aws:mobiletargeting:${AWS::Region}:${AWS::AccountId}:templates/*/email"
                  - !Sub "arn:aws:mobiletargeting:${AWS::Region}:${AWS::AccountId}:templates/*/EMAIL"
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: iam

  ExportDBEntities:
    Type: AWS::Serverless::Function
    Properties:
      Handler: exportentities.main
      FunctionName: !Sub ${StackNamePrefix}${NestedStackPrefix}ExportDBEntities-${StageName}
      CodeUri: exportentities
      Environment:
        Variables:
          MACHINE_ARN: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${StackNamePrefix}DataExportStateMachine-${StageName}
      Role: !GetAtt ExportDBEntitiesRole.Arn

  InitExportLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref HyphenLambdaManagedPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InitExportLambdaRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub ${FileManagerBucketARN}/customer_exports/*
                  - !Sub ${FileManagerBucketARN}/realtor_exports/*
              - Effect: Allow
                Action:
                  - es:ESHttpPost
                  - es:ESHttpPut
                Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomain}/*
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: iam

  InitExportLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: initExport.main
      CodeUri: initExport
      Role: !GetAtt InitExportLambdaRole.Arn

  ErrorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ErrorLambdaRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub ${FileManagerBucketARN}/customer_exports/*
                  - !Sub ${FileManagerBucketARN}/realtor_exports/*
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:PutItem
                Resource:
                  - !Ref DynamoDBArn
                  - !Sub ${DynamoDBArn}/index/*
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: iam

  ErrorLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: error.main
      CodeUri: error
      Role: !GetAtt ErrorLambdaRole.Arn

  IteratorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: iam

  IteratorLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: iterator.main
      CodeUri: iterator
      Role: !GetAtt IteratorLambdaRole.Arn

  ExportCompletedLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ExportCompletedLambdaRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub ${FileManagerBucketARN}/customer_exports/*
                  - !Sub ${FileManagerBucketARN}/realtor_exports/*
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:PutItem
                Resource:
                  - !Ref DynamoDBArn
                  - !Sub ${DynamoDBArn}/index/*
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: iam

  ExportCompletedLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: exportCompleted.main
      CodeUri: exportCompleted
      Role: !GetAtt ExportCompletedLambdaRole.Arn

  FetchDataLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: FetchDataLambdaRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub ${FileManagerBucketARN}/customer_exports/*
                  - !Sub ${FileManagerBucketARN}/realtor_exports/*
              - Effect: Allow
                Action:
                  - es:ESHttpPost
                  - es:ESHttpPut
                Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomain}/*
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: iam

  FetchDataLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: fetchData.main
      CodeUri: fetchData
      Role: !GetAtt FetchDataLambdaRole.Arn

  DataExportStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: DataExportStatesExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  # - !GetAtt GetImportEnabledHomebuildersLambda.Arn
                  - !GetAtt ExportDBEntities.Arn
                  # - !GetAtt ProcessLeadsLambda.Arn
                  # - !GetAtt ImportCustomerLambda.Arn
                  # - !GetAtt IteratorLambda.Arn
                  - !GetAtt ExceptionLambda.Arn
                  - !GetAtt SuccessLambda.Arn
                  - !GetAtt InitExportLambda.Arn
                  - !GetAtt ErrorLambda.Arn
                  - !GetAtt IteratorLambda.Arn
                  - !GetAtt ExportCompletedLambda.Arn
                  - !GetAtt FetchDataLambda.Arn
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  # - !Sub ${GetImportEnabledHomebuildersLambda.Arn}:*
                  - !Sub ${ExportDBEntities.Arn}:*
                  # - !Sub ${ProcessLeadsLambda.Arn}:*
                  # - !Sub ${ImportCustomerLambda.Arn}:*
                  # - !Sub ${IteratorLambda.Arn}:*
                  - !Sub ${ExceptionLambda.Arn}:*
                  - !Sub ${SuccessLambda.Arn}:*
                  - !Sub ${InitExportLambda.Arn}:*
                  - !Sub ${ErrorLambda.Arn}:*
                  - !Sub ${IteratorLambda.Arn}:*
                  - !Sub ${ExportCompletedLambda.Arn}:*
                  - !Sub ${FetchDataLambda.Arn}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: "*"
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: "*"
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: iam

  DataExportStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub ${StackNamePrefix}DataExportStateMachine-${StageName}
      DefinitionString: !Sub
        - |-
          {
            "Comment": "State machine for exporting data",
            "StartAt": "ChooseAction?",
            "States": {
              "ChooseAction?": {
                "Comment": "Based on the purpose variable, this state machine performs different tasks",
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.purpose",
                    "StringEquals": "exportCustomer",
                    "Next": "InitExport"
                  },
                  {
                    "Variable": "$.purpose",
                    "StringEquals": "exportRealtor",
                    "Next": "InitExport"
                  }
                ],
                "Default": "ExportBuilderData"
              },
              "InitExport": {
                "Type": "Task",
                "Resource": "${InitExportLambdaARN}",
                "TimeoutSeconds": 86400,
                "HeartbeatSeconds": 3600,
                "Next": "hasValidCount?"
              },
              "hasValidCount?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.status",
                    "BooleanEquals": true,
                    "Next": "SetIteratorCount"
                  }
                ],
                "Default": "Error"
              },
              "SetIteratorCount": {
                "Type": "Pass",
                "Result": {
                  "index": -1,
                  "step": 5000,
                  "nextIndexValue": null
                },
                "ResultPath": "$.iterator",
                "Next": "Iterator"
              },
              "Iterator": {
                "Type": "Task",
                "Resource": "${IteratorLambdaARN}",
                "TimeoutSeconds": 86400,
                "HeartbeatSeconds": 3600,
                "ResultPath": "$.iterator",
                "Next": "IsCountReached?"
              },
              "IsCountReached?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.iterator.continue",
                    "BooleanEquals": true,
                    "Next": "FetchData"
                  }
                ],
                "Default": "ExportCompleted"
              },
              "FetchData": {
                "Type": "Task",
                "Resource": "${FetchDataLambdaARN}",
                "TimeoutSeconds": 86400,
                "HeartbeatSeconds": 3600,
                "Next": "IsValidData?"
              },
              "IsValidData?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.status",
                    "BooleanEquals": true,
                    "Next": "Iterator"
                  }
                ],
                "Default": "Error"
              },
              "ExportBuilderData": {
                "Type": "Task",
                "Resource": "${exportDBEntitiesLambdaARN}",
                "TimeoutSeconds": 86400,
                "HeartbeatSeconds": 3600,
                "Next": "ExportComplete?"
              },
              "ExportComplete?": {
                "Comment": "Is th export complete without any errors",
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.exportComplete",
                    "BooleanEquals": true,
                    "Next": "Success"
                  }
                ],
                "Default": "ExceptionOccured"
              },
              "Success": {
                "Type": "Task",
                "Resource": "${successLambdaARN}",
                "TimeoutSeconds": 86400,
                "HeartbeatSeconds": 3600,
                "Next": "EndProcess"
              },
              "ExportCompleted": {
                "Type": "Task",
                "Resource": "${exportCompletedLambdaARN}",
                "TimeoutSeconds": 86400,
                "HeartbeatSeconds": 3600,
                "Next": "EndProcess"
              },
              "ExceptionOccured": {
                "Type": "Task",
                "Resource": "${exceptionLambdaARN}",
                "TimeoutSeconds": 86400,
                "HeartbeatSeconds": 3600,
                "Next": "InvalidRequest"
              },
              "Error": {
                "Type": "Task",
                "Resource": "${ErrorLambdaARN}",
                "TimeoutSeconds": 86400,
                "HeartbeatSeconds": 3600,
                "Next": "InvalidRequest"
              },
              "InvalidRequest": {
                "Type": "Fail",
                "Cause": "Invalid request/Exception occured",
                "Error": "Request contains invalid or missing values/Exception"
              },
              "EndProcess": {
                "Type": "Pass",
                "End": true
              }
            }
          }
        - {
            # configLambdaARN: !GetAtt GetImportEnabledHomebuildersLambda.Arn,
            exportDBEntitiesLambdaARN: !GetAtt ExportDBEntities.Arn,
            # processLeadsArn: !GetAtt ProcessLeadsLambda.Arn,
            # importCustomerArn: !GetAtt ImportCustomerLambda.Arn,
            # iteratorLambdaARN: !GetAtt IteratorLambda.Arn,
            exceptionLambdaARN: !GetAtt ExceptionLambda.Arn,
            successLambdaARN: !GetAtt SuccessLambda.Arn,
            InitExportLambdaARN : !GetAtt InitExportLambda.Arn,
            ErrorLambdaARN : !GetAtt  ErrorLambda.Arn,
            IteratorLambdaARN : !GetAtt IteratorLambda.Arn,
            FetchDataLambdaARN : !GetAtt FetchDataLambda.Arn,
            exportCompletedLambdaARN : !GetAtt ExportCompletedLambda.Arn
          }
      RoleArn: !GetAtt DataExportStateMachineRole.Arn
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt DataExportStateMachineLogGroup.Arn
        IncludeExecutionData: true
        Level: ALL
      TracingConfiguration:
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: stepfunctions

  DataExportStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${StackNamePrefix}DataExportStateMachine-${StageName}
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: cloudwatch

  DataExportStateMachineStartExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      # ManagedPolicyName: !Sub ${StackNamePrefix}state-machine-start-execution-policy-${StageName}
      Roles:
        - !Ref DataExportStateMachineStartExecutionRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - !Ref DataExportStateMachine
          - Effect: Allow
            Action:
              - logs:CreateLogDelivery
              - logs:GetLogDelivery
              - logs:UpdateLogDelivery
              - logs:DeleteLogDelivery
              - logs:ListLogDeliveries
              - logs:PutResourcePolicy
              - logs:DescribeResourcePolicies
              - logs:DescribeLogGroups
            Resource: "*"

  DataExportStateMachineStartExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: !Sub ${StackNamePrefix}state-machine-start-execution-role-${StageName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: iam

  DataImportStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: DataImportStatesExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  # - !GetAtt GetImportEnabledHomebuildersLambda.Arn
                  - !GetAtt ImportInitLambda.Arn
                  # - !GetAtt ProcessLeadsLambda.Arn
                  # - !GetAtt ImportCustomerLambda.Arn
                  # - !GetAtt IteratorLambda.Arn
                  - !GetAtt ExceptionLambda.Arn
                  - !GetAtt SuccessLambda.Arn
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  # - !Sub ${GetImportEnabledHomebuildersLambda.Arn}:*
                  - !Sub ${ImportInitLambda.Arn}:*
                  # - !Sub ${ProcessLeadsLambda.Arn}:*
                  # - !Sub ${ImportCustomerLambda.Arn}:*
                  # - !Sub ${IteratorLambda.Arn}:*
                  - !Sub ${ExceptionLambda.Arn}:*
                  - !Sub ${SuccessLambda.Arn}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: "*"
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: "*"
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: iam

  ImportInitLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref HyphenLambdaManagedPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ImportInitLambdaRoleRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub ${FileManagerBucketARN}/builder_imports/*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Ref FileManagerBucketARN
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Ref FirehosePinpointRoleARN
              - Effect: Allow
                Action:
                  - mobiletargeting:TagResource
                  - mobiletargeting:CreateApp
                  - mobiletargeting:UpdateEmailChannel
                  - mobiletargeting:CreateSegment
                  - mobiletargeting:CreateCampaign
                  - mobiletargeting:CreateJourney
                Resource: !Sub arn:aws:mobiletargeting:${AWS::Region}:${AWS::AccountId}:apps/*
              - Effect: Allow
                Action:
                  - mobiletargeting:UpdateJourney
                  - mobiletargeting:DeleteJourney
                  - mobiletargeting:UpdateJourneyState
                  - mobiletargeting:GetJourney
                Resource: !Sub "arn:aws:mobiletargeting:${AWS::Region}:${AWS::AccountId}:apps/*/journeys/*"
              - Effect: Allow
                Action:
                  - mobiletargeting:GetSegment
                  - mobiletargeting:DeleteSegment
                  - mobiletargeting:TagResource
                  - mobiletargeting:UpdateSegment
                Resource: !Sub "arn:aws:mobiletargeting:${AWS::Region}:${AWS::AccountId}:apps/*/segments/*"
              - Effect: Allow
                Action:
                  - mobiletargeting:GetCampaignActivities
                  - mobiletargeting:UpdateCampaign
                  - mobiletargeting:DeleteCampaign
                Resource: !Sub "arn:aws:mobiletargeting:${AWS::Region}:${AWS::AccountId}:apps/*/campaigns/*"
              - Effect: Allow
                Action:
                  - mobiletargeting:CreateEmailTemplate
                  - mobiletargeting:DeleteEmailTemplate
                  - mobiletargeting:GetEmailTemplate
                  - mobiletargeting:UpdateEmailTemplate
                Resource:
                  - !Sub "arn:aws:mobiletargeting:${AWS::Region}:${AWS::AccountId}:templates/*/email"
                  - !Sub "arn:aws:mobiletargeting:${AWS::Region}:${AWS::AccountId}:templates/*/EMAIL"
              - Effect: Allow
                Action:
                  - mobiletargeting:PutEventStream
                Resource: !Sub arn:aws:mobiletargeting:${AWS::Region}:${AWS::AccountId}:apps/*/eventstream
              - Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminSetUserPassword
                Resource: !Ref CognitoUserPoolExtArn
              - Effect: Allow
                Action:
                  - ses:VerifyEmailIdentity
                  - ses:GetIdentityVerificationAttributes
                  - ses:GetIdentityDkimAttributes
                  - ses:VerifyDomainDkim
                  - ses:SetIdentityDkimEnabled
                  - ses:SendCustomVerificationEmail
                  - ses:GetCustomVerificationEmailTemplate
                  - ses:CreateCustomVerificationEmailTemplate
                  - ses:UpdateCustomVerificationEmailTemplate
                Resource: "*"
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                Resource: !Ref EnDCryptKeyARN
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: iam

  ImportInitLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: importinit.main
      FunctionName: !Sub ${StackNamePrefix}${NestedStackPrefix}ImportInitLambda-${StageName}
      CodeUri: importinit
      Environment:
        Variables:
          MACHINE_ARN: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${StackNamePrefix}DataExportStateMachine-${StageName}
          FIREHOSE_ARN: !Ref HyphenCRMFirehoseARN
          FIREHOSE_PINPOINT_ROLE: !Ref FirehosePinpointRoleARN
          REGION:
            Ref: AWS::Region
          ACCOUNT_ID:
            Ref: AWS::AccountId
          EXT_USER_POOL_ID: !Ref ExternalUserPoolId
          DYNAMODB_KMS_KEY_ID: !Ref EnDCryptKeyARN
      Role: !GetAtt ImportInitLambdaRole.Arn

  ImportInitLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ImportInitLambda}
      RetentionInDays: 90
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: cloudwatch

  DataImportStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub ${StackNamePrefix}DataImportStateMachine-${StageName}
      DefinitionString: !Sub
        - |-
          {
            "Comment": "State machine for importing builder data to DynamoDB",
            "StartAt": "InitBuilderImport",
            "States": {
              "InitBuilderImport": {
                "Type": "Task",
                "Resource": "${ImportInitLambdaARN}",
                "TimeoutSeconds": 86400,
                "HeartbeatSeconds": 3600,
                "Next": "importComplete?"
              },
              "importComplete?": {
                "Comment": "Is th export complete without any errors",
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.importComplete",
                    "BooleanEquals": true,
                    "Next": "Success"
                  }
                ],
                "Default": "ExceptionOccured"
              },
              "Success": {
                "Type": "Task",
                "Resource": "${successLambdaARN}",
                "TimeoutSeconds": 86400,
                "HeartbeatSeconds": 3600,
                "Next": "EndProcess"
              },
              "ExceptionOccured": {
                "Type": "Task",
                "Resource": "${exceptionLambdaARN}",
                "TimeoutSeconds": 86400,
                "HeartbeatSeconds": 3600,
                "Next": "InvalidRequest"
              },
              "InvalidRequest": {
                "Type": "Fail",
                "Cause": "Invalid request/Exception occured",
                "Error": "Request contains invalid or missing values/Exception"
              },
              "EndProcess": {
                "Type": "Pass",
                "End": true
              }
            }
          }
        - {
            # configLambdaARN: !GetAtt GetImportEnabledHomebuildersLambda.Arn,
            ImportInitLambdaARN: !GetAtt ImportInitLambda.Arn,
            # processLeadsArn: !GetAtt ProcessLeadsLambda.Arn,
            # importCustomerArn: !GetAtt ImportCustomerLambda.Arn,
            # iteratorLambdaARN: !GetAtt IteratorLambda.Arn,
            exceptionLambdaARN: !GetAtt ExceptionLambda.Arn,
            successLambdaARN: !GetAtt SuccessLambda.Arn,
          }
      RoleArn: !GetAtt DataImportStateMachineRole.Arn
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt DataImportStateMachineLogGroup.Arn
        IncludeExecutionData: true
        Level: ALL
      TracingConfiguration:
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: stepfunctions

  DataImportStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${StackNamePrefix}DataImportStateMachine-${StageName}
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: cloudwatch

  DataImportStateMachineStartExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      # ManagedPolicyName: !Sub ${StackNamePrefix}state-machine-start-execution-policy-${StageName}
      Roles:
        - !Ref DataImportStateMachineStartExecutionRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - !Ref DataImportStateMachine
          - Effect: Allow
            Action:
              - logs:CreateLogDelivery
              - logs:GetLogDelivery
              - logs:UpdateLogDelivery
              - logs:DeleteLogDelivery
              - logs:ListLogDeliveries
              - logs:PutResourcePolicy
              - logs:DescribeResourcePolicies
              - logs:DescribeLogGroups
            Resource: "*"

  DataImportStateMachineStartExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: !Sub ${StackNamePrefix}state-machine-start-execution-role-${StageName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: iam
Outputs:
  DataExportStateMachineArn:
    Value: !GetAtt DataExportStateMachine.Arn
  DataImportStateMachineArn:
    Value: !GetAtt DataImportStateMachine.Arn
