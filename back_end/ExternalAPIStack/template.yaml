AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Test SAM Template"

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 60
    Layers:
      - !Ref AwsSdkLayer
    Tags:
      Environment: !Ref StageName
      Application: !Ref ApplicationTag
      Owner: !Ref OwnerTag
      Purpose: !Ref PurposeTag
      Service: lambda
Parameters:
  StageName:
    Type: String
  StackNamePrefix:
    Type: String
  AwsSdkLayer:
    Type: String
  HyphenLambdaManagedPolicy:
    Type: String
  RedirectURI:
    Type: String
    Default: http://localhost
  Scope:
    Type: String
    Default: openid
  ResponseType:
    Type: String
    Default: code
  # IsEnableCustomDomain:
  #   Type: String
  IssueNumber:
    Type: String
  ApplicationTag:
    Type: String
  OwnerTag:
    Type: String
  PurposeTag:
    Type: String
  NestedStackPrefix:
    Type: String
    Default: "externalApi-" 
# Conditions:
#   EnableCustomDomain: !Equals [!Ref IsEnableCustomDomain, "true"]
Resources:
  CognitoUserPoolExt:
    Type: AWS::Cognito::UserPool
    Properties:
      # Generate a name based on the stage
      UserPoolName: !Sub "${StackNamePrefix}user-pool-ext-${StageName}-cup"
      # Set email as an alias
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Mutable: true
          Name: hb_id
      LambdaConfig:
        PreTokenGeneration: !GetAtt PreTokenLambda.Arn
      # MfaConfiguration: OPTIONAL
      # EnabledMfas:
      #   - SOFTWARE_TOKEN_MFA
  LambdaCongitoPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreTokenLambda.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPoolExt.Arn
  CognitoUserPoolClientExt:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      # AccessTokenValidity: 3600
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - openid
      CallbackURLs:
        - !Ref RedirectURI
      ClientName: !Sub "${StackNamePrefix}user-pool-client-ext-${StageName}-cup"
      UserPoolId: !Ref CognitoUserPoolExt
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      GenerateSecret: true
      SupportedIdentityProviders:
        - COGNITO
  CognitoUserPoolExtDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref CognitoUserPoolExt
      Domain: !Sub crm-userpool-ext${IssueNumber}-${StageName}-cud
  PreTokenLambda:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: pretoken.main
      FunctionName: !Sub ${StackNamePrefix}${NestedStackPrefix}PreTokenLambda-${StageName}
      CodeUri: pretoken
      Environment:
        Variables:
          STACK_PREFIX: !Ref StackNamePrefix
          ES_REGION:
            Ref: "AWS::Region"
      Policies:
        - !Ref HyphenLambdaManagedPolicy
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - execute-api:Invoke
              Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*

  PreTokenLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PreTokenLambda}
      RetentionInDays: 90
      Tags:
        - Key: Environment
          Value: !Ref StageName
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Purpose
          Value: !Ref PurposeTag
        - Key: Service
          Value: cloudwatch

Outputs:
  UserPoolIdExternal:
    Value:
      Ref: CognitoUserPoolExt
  UserPoolClientIdExternal:
    Value:
      Ref: CognitoUserPoolClientExt
  UserPoolIdExternalArn:
    Value: !GetAtt CognitoUserPoolExt.Arn
  UserPoolDomainNameExternal:
    Value: !Sub ${CognitoUserPoolExtDomain}.auth.${AWS::Region}.amazoncognito.com
  PreTokenLambdaArn:
    Value: !GetAtt PreTokenLambda.Arn
  ResponseType:
    Value: !Ref ResponseType
  RedirectURI:
    Value: !Ref RedirectURI
  Scope:
    Value: !Ref Scope
